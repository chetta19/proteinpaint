include:
  - project: nci-gdc/gitlab-templates
    ref: master
    file:
      - templates/global/full.yaml
      - templates/deployments/salt-service.yaml

.services:
  allow_failure: true
  stage: deploy
  when: manual
  parallel:
    matrix:
      - DEPLOY_SERVICE_LIST: [ custom-proteinpaint ]

stages:
  - test
  - build
  - deploy

image: docker.osdc.io/node:12
variables:
  npm_config_registry: https://nexus.osdc.io/repository/npm-all/
  DOCKER_BUILDKIT: 1
  PP_CUSTOMER: gdc
  NPM_RELEASE_REGISTRY: https://nexus.osdc.io/repository/npm-local/

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DEPLOY_SERVICE_TAG: ${CI_COMMIT_TAG}
    - if: $CI_COMMIT_BRANCH
      variables:
        DEPLOY_SERVICE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}
    - when: always

client-test:
  allow_failure: true
  stage: test
  before_script:
    - npm install -g npm@7
    - npm run reset
  script:
    - cd client/
    - npm install
    - npm run pretest
    - pwd
    - ls -lsha ../public
    - npm run test

server:
  allow_failure: true
  stage: test
  variables:
    NODE_ENV: development
  before_script:
    - cd server
    - npm install
  script:
    - npm run dev < /dev/null &> dev.log & # generates the server.js bundle
    - npm start < /dev/null &> start.log & # starts the server
    - npm test # tests the server code
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - /root/.npm/_logs/
      - dev.log
      - start.log

client:
  allow_failure: true
  stage: test
  variables:
    NODE_ENV: development
  before_script:
    - cd client
    - npm install
  script:
    - npm run dev < /dev/null &> dev.log & # generates bundles to public/bin
    - npm test # tests the client code
    - npm run browser < /dev/null &> browser.log & # bundles the front-end spec files for use at localhost:[port]/testrun.html
    - npm run gdc # runs the gdc tests
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - /root/.npm/_logs/
      - dev.log
      - browser.log

npm-build:
  allow_failure: true
  stage: test
  variables:
    npm_config__auth: ${NEXUS_NPM_AUTHTOKEN}
  before_script:
    - npm install -g npm@7
    - npm run reset
  script:
    - cd client/
    - npx cross-env npm -D install
    - npx rollup -c ./rollup.config.js
    - echo "registry = ${NPM_RELEASE_REGISTRY}_auth=${NEXUS_NPM_AUTHTOKEN}" > .npmrc
    - npm publish || ls -lsha
  artifacts:
    expire_in: 1 week
    when: always
    paths:
      - /root/.npm/_logs/
      - "@stjude/proteinpaint-client-*.tgz"

Backend Build - hash:
  except:
    - tags
  stage: build
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  before_script:
    - apk add git bash
  script:
    - bash ./build/gdc/build.sh -r HEAD -d "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}" -x -p --
    - docker push "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"

Backend Build - latest:
  only:
    - master
  except:
    - tags
  stage: build
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  needs:
    - Backend Build - hash
  script:
    - docker pull "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
    - docker tag "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}" "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:latest"
    - docker push "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:latest"

Backend Build - tag:
  stage: build
  only:
    - tags
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  script:
    - docker pull "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
    - docker tag "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}" "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}"
    - docker push "${DOCKER_RELEASE_REGISTRY}/ncigdc/${CI_PROJECT_NAME}:${CI_COMMIT_TAG}"
