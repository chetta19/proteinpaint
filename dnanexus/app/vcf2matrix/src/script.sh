#!/bin/bash
# vcf2matrix 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of vcf_file: '${vcf_file[@]}'"
    echo "Value of other_options: '$other_options'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

	dx-download-all-inputs

	mkdir -p out/matrix_viewer/

	output_name="${vcf_file_prefix[0]}.matrix"
	bookmark_name="${vcf_file_prefix[0]}.bookmark"

    # Fill in your application code here.
	nodejs /usr/bin/bin.smat.js $other_options ${vcf_file_path[@]} > $output_name

	dx upload $output_name --type FileViewer --details '{"patterns": ["*.gz", "*.gz.tbi", "*.gz.csi"]}' # | nodejs /usr/bin/bookmark.js > $bookmark_name


	mv $output_name out/matrix_viewer/
	#mv $bookmark_name out/matrix_viewer/
	dx-upload-all-outputs

    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    #html=$(dx upload html --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    #dx-jobutil-add-output html "$html" --class=file
}
