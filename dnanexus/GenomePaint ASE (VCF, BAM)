<!DOCTYPE html>

<html lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>GenomePaint</title>
	<script src='https://platform.dnanexus.com/javascript/file-viewer-1.1.min.js'></script>
	<script src='https://proteinpaint.stjude.org/bin/proteinpaint.js'></script>
	<!--
	<script src='http://localhost:3001/bin/proteinpaint.js'></script>
	-->
    <style type="text/css">
  
	body {
		margin: 0;
		padding: 0;
	}
	
	.omnibar {
		  width: 100%;
		  background: #1381B3;
		  min-height: 64px;
		  font-family: 'Open Sans', "Helvetica Neue", Helvetica, Arial, sans-serif
	}
  

	.logo {
		display: block;
		float: left;
		margin: 0 auto;
		width: 50px;
		height: 50px;
		color: #fff;
		text-decoration: none;
		padding: 8px 10px;
	}
	
	.logo img {
		border: none;
		margin: 0;
		padding: 0;
		width: 100%;
	}
	
	.site-title {
		font-weight: 300;
		font-size: 22px;
		padding: 0;
		margin: 0;
		color: #A1CDE1;
		padding: 14px;
	}
	
	.site-title a {
		color: #fff;
		text-decoration: none;
		font-weight: 600;
	}
	
	
	.nav {
		float: right;
		margin: 0;
		padding: 20px 30px 20px 0;
	}
	
	.nav li {
		display: inline;
		margin: 0;
		padding: 0;
		margin-left: 40px;
		font-weight: 600;
		font-size: 14px;
	}
	
	.nav li a {
		text-decoration: none;
		color: #fff;
		text-transform: uppercase;
	}
	
  
  </style>


  </head>





  <body>


    <div class="omnibar">
        <ul class="nav">
			<li><a href="https://platform.stjude.cloud/requests/data_by_disease">Data</a></li>
			<li><a href="https://platform.stjude.cloud/tools">Tools</a></li>
			<li><a href="https://platform.stjude.cloud/visualizations/cohort">Visualizations</a></li>
        </ul>
        <a href="index.html" class="logo"><img src="https://pecan.stjude.org/static/stjude-logo-child.png" alt="St. Jude Cloud" title="St. Jude Cloud" /></a>
        <h1 class="site-title"><a href="index.html">St. Jude Cloud</a> GenomePaint</h1>   
    </div>



    <div class="container-fluid" id="proteinpaintdiv"></div>
    <div class="container-fluid" id="refselect"></div>

    <script type="text/javascript">
      getOptions(function(options) {

        function getPath(file) {
          return file.folder + "/" + file.name;
        }

        var pathToURL = {};
        for (var i = 0; i < options.files.length; ++i) {
          pathToURL[getPath(options.files[i])] = options.files[i].url;
        }

		let vcf
		let bamcount = 0
		const sample2bam = {}

		for(var path in pathToURL) {
			var filename = path.split('/').pop()
			if(path.endsWith('.vcf.gz')) {
				var indexfile = pathToURL[path+'.csi'] || pathToURL[path+'.tbi']
				if(indexfile) {
					vcf = {
						name: filename.replace(/\.vcf\.gz$/,''),
						url: pathToURL[path],
						indexURL: indexfile,
					}
				} else {
					window.alert("You chose a 'vcf.gz' file (" + filename + ") but no associated index file (.tbi or .csi)");
				}
			} else if(path.endsWith('.bam')) {
				var indexfile = pathToURL[path+'.bai']
				if(indexfile) {
					const lst = filename.split('.')
					const totalreads = Number.parseInt(lst[0])
					if(Number.isNaN(totalreads)) {
						window.alert('Invalid total number of mapped reads from a BAM file')
						continue
					}
					const samplename = lst[1]
					if(!samplename) {
						window.alert('Missing sample name from a BAM file name')
						continue
					}
					bamcount++
					sample2bam[ samplename ] = {
						totalreads: totalreads,
						pairedend: true,
						url:pathToURL[path],
						indexURL: indexfile,
					}
				}
			}
		}

		let tk

		if(!vcf) {
			window.alert('No VCF file')
			return
		}
		if(bamcount==0) {
			window.alert('No BAM file')
			return
		}
		if(bamcount==1) {
			let bam, sample
			for(const k in sample2bam) {
				sample = k
				bam = sample2bam[k]
			}
			tk = {
				type:'ase',
				name: vcf.name+' ASE',
				samplename: sample,
				vcfurl: vcf.url,
				vcfindexURL: vcf.indexURL,
				rnabamurl: bam.url,
				rnabamindexURL: bam.indexURL,
				rnabamtotalreads: bam.totalreads,
				rnabamispairedend: true,
			}

		} else {
			tk = {
				type: 'mdssvcnv',
				name: vcf.name+' ASE',
				checkvcf: vcf,
				checkrnabam:{
					samples: sample2bam
				}
			}
		}


		const div = document.getElementById('refselect')

		const runpp = (tk, refgenome)=>{

			div.parentNode.removeChild(div)

			runproteinpaint({
				host:'https://proteinpaint.stjude.org',
				//host:'http://localhost:3001',
				holder:document.getElementById('proteinpaintdiv'),
				block:true,
				genome: refgenome,
				nobox:true,
				noheader:true,
				nativetracks:'refgene',
				tracks:[ tk ]
			})
		}

		const lst = [
			{name:'human hg19', key:'hg19'},
			{name:'human hg38', key:'hg38'},
			{name:'mouse mm9', key:'mm9'},
			{name:'kouse mm10', key:'mm10'}
		]

		const h = document.createElement('h2')
		h.innerHTML = 'Select a reference genome'
		div.appendChild(h)

		for(const g of lst) {
			const b = document.createElement('button')
			b.innerHTML = g.name
			b.style.margin = '10px'
			b.onclick = ()=> runpp( tk, g.key )
			div.appendChild(b)
		}
	})
    </script>
  </body>
</html>
