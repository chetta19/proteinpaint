<!DOCTYPE html>

<html lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>ProteinPaint</title>
	<script src='https://platform.dnanexus.com/javascript/file-viewer-1.2.min.js'></script>
	<script src='https://proteinpaint.stjude.org/bin/proteinpaint.js'></script>
  </head>


  <body>

    <div id="proteinpaintdiv"></div>

    <script type="text/javascript">
      getOptions(function(options) {

	  //console.log(options)

        function getPath(file) {
          return file.folder + "/" + file.name;
        }

        var pathToURL = {};
        for (var i = 0; i < options.files.length; ++i) {
          pathToURL[getPath(options.files[i])] = options.files[i].url;
        }

		var tracks=[]

		for(var path in pathToURL) {
			var filename = path.split('/').pop();
			if(path.endsWith('.vcf.gz')) {
				var indexfile = pathToURL[path+'.csi'] || pathToURL[path+'.tbi']
				if(indexfile) {
					tracks.push({
						name: filename.replace(/\.vcf\.gz$/,''),
						url: pathToURL[path],
						indexURL: indexfile,
						type: 'vcf'
					})
				} else {
					window.alert("You chose a VCF.GZ file (" + filename + ") but no associated index file (.tbi or .csi)");
				}

			} else if(path.endsWith('.bam')) {
				var indexfile = pathToURL[path+'.bai']
				if(indexfile) {
					tracks.push({
						name:filename.replace(/\.bam$/,''),
						url:pathToURL[path],
						indexURL: indexfile,
						type:'bam'
					})
				} else {
					window.alert('You chose a .bam file ('+filename+') but no associated .bai index file')
				}

			} else if(path.endsWith('.bedj.gz')) {
				var indexfile = pathToURL[path+'.csi'] || pathToURL[path+'.tbi']
				if(indexfile) {
					tracks.push({
						name:filename.replace(/\.bedj\.gz$/,''),
						url:pathToURL[path],
						indexURL: indexfile,
						type:'bedj'
					})
				} else {
					window.alert('You chose a BEDJ.GZ file ('+filename+') but no associated index file (.tbi or .csi)')
				}
			} else if(path.endsWith('.bw')) {
				var url=pathToURL[path]

				// REPLACE
				var basename=url.split('/').pop().replace(/\.bw$/,'')
				if(basename.substr(basename.length-10,10)=='.negStrand') {
					var samplename=basename.replace('.negStrand','')
					var notfound=true
					for(var j=0; j<tracks.length; j++) {
						var tk=tracks[j]
						if(tk.type=='bigwigstranded' && tk.name==samplename) {
							tk.strand2={
								url:url,
								scale:{auto:1}
							}
							notfound=false
							break
						}
					}
					if(notfound) {
						tracks.push({
							type:'bigwigstranded',
							name:samplename,
							iscustom:true,
							strand2:{
								url:url,
								scale:{auto:1}
							}
						})
					}
				} else if(basename.substr(basename.length-10,10)=='.posStrand') {
					var samplename=basename.replace('.posStrand','')
					var notfound=true
					for(var j=0; j<tracks.length; j++) {
						var tk=tracks[j]
						if(tk.type=='bigwigstranded' && tk.name==samplename) {
							tk.strand1={
								url:url,
								scale:{auto:1}
							}
							notfound=false
							break
						}
					}
					if(notfound) {
						tracks.push({
							type:'bigwigstranded',
							name:samplename,
							iscustom:true,
							strand1:{
								url:url,
								scale:{auto:1}
							}
						})
					}
				} else {
					tracks.push({
						url:url,
						type:'bigwig',
						name:basename,
						scale:{auto:1},
						iscustom:true
					})
				}
			}
		}

		if(tracks.length>0) {
			var lst=[]
			tracks.forEach(function(tk){
				if(tk.type=='bigwigstranded') {
					if(tk.strand1 && tk.strand2) {
						lst.push(tk)
					} else if(tk.strand1) {
						lst.push({
							type:'bigwig',
							url:tk.strand1.url,
							scale:{auto:1},
							name:tk.name
						})
					} else if(tk.strand2) {
						lst.push({
							type:'bigwig',
							url:tk.strand2.url,
							scale:{auto:1},
							name:tk.name
						})
					}
				} else {
					lst.push(tk)
				}
			})
			tracks=lst
		}

		runproteinpaint({
			host:'https://proteinpaint.stjude.org',
			holder:document.getElementById('proteinpaintdiv'),
			noheader:true,
			selectGenomeWithTklst: tracks
		})
	});
    </script>
  </body>
</html>
